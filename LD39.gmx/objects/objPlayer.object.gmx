<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprPlayerIdle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-15</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>sprPlayerCollision</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed = 1/room_speed * 3;

_gravity = 0.27;
fallSpeedMax = 15;
minFallSpeed = 2.5;

_hspeed = 0;
_vspeed = 0;
moveSpeed = 3;

jumpCount = 0;
jumpMax = 2;
jumpForce = 6;

freeze = false;
isDead = false;
animStarted = false;
onCheckpoint = false;

_hspeedPlatform = 0;

instance_create(x,y,objFlashlight);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for(i = 0; i &lt; 150; i++)
{
    instance_create(x,y,objBlood);
}
audio_play_sound(sndDie,0,false);
    instance_create(view_xview[0],0,objDeath);
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>keySuicide = keyboard_check_pressed(ord("Q"));
if (keySuicide &amp;&amp; !freeze)
{
    scrDie();
}

if (isDead &amp;&amp; !animStarted)
{           
    audio_sound_gain(musTheme,0,500);
audio_sound_gain(musBoss,0,500);
audio_sound_gain(musGame,0,500);
audio_sound_gain(musSecret,0,500);
    animStarted = true;
    alarm[0] = 30;
    freeze = true;
}

transformator = instance_place(x,y,objTransformator);
if (transformator != noone &amp;&amp; !onCheckpoint)
{
    onCheckpoint = true;
    objFlashlight.transformator = transformator;
    objFlashlight.currentCharge = transformator.charge;
    objFlashlight.maxCharge = transformator.charge;
} 
else if (transformator == noone &amp;&amp; onCheckpoint)
{
    objFlashlight.transformator = noone;
    onCheckpoint = false;
}
keyRight = keyboard_check(vk_right);
keyLeft = -keyboard_check(vk_left);
keyJump = keyboard_check_pressed(vk_shift);
keyJumpHold = keyboard_check(vk_shift);
onGround = place_meeting(x, y + 1, objCollider);

if (keyboard_check_pressed(vk_control))
{
    x = mouse_x;
    y = mouse_y;
}

if (keyboard_check_pressed(vk_pageup))
{
    if (room == rSecret)
       room_goto(rLevel5);
    else if (room !=  rEnd)
        room_goto_next();
}

if (keyboard_check_pressed(vk_pagedown))
{
    if (room == rSecret)
       room_goto(rLevel4);
    else if (room != rLevel1)
         room_goto_previous();
}


_direction = keyRight + keyLeft;
_hspeed = _direction * moveSpeed;

_vspeed = min(_vspeed + _gravity, fallSpeedMax);

if (onGround)
{
    jumpCount = 0;
}
else if (jumpCount == 0)
{
    jumpCount++;
}

if (keyJump &amp;&amp; jumpCount &lt; jumpMax)
{
    audio_play_sound(sndJump,0,false);
    jumpCount++;
    _vspeed = -jumpForce;
}

if (_vspeed &lt; 0 &amp;&amp; !keyJumpHold)
{
    _vspeed = max(_vspeed, -minFallSpeed);
}


_hspeed += _hspeedPlatform;
_hspeedPlatform = 0;
if (place_meeting(x + _hspeed, y, objCollider))
{
    while(!place_meeting(x + sign(_hspeed), y, objCollider))
    {
        x += sign(_hspeed);
    }
    _hspeed = 0;
}

if (!freeze)
{
    x += _hspeed;
}

if (place_meeting(x, y + _vspeed, objCollider))
{
    while(!place_meeting(x, y + sign(_vspeed), objCollider))
    {
        y += sign(_vspeed);
    }
    _vspeed = 0;
}

if (!freeze)
{
    y += _vspeed;
}

if (_direction != 0)
{
    image_xscale = _direction;
}

if (onGround)
{
    if (_direction != 0)
    {
        sprite_index = sprPlayerRun;
    }
    else
    {
        sprite_index = sprPlayerIdle;
    }
}
else
{
    if (_vspeed &lt; 0)
    {
        sprite_index = sprPlayerJump;
    }
    else
    {
        sprite_index = sprPlayerFall;
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
